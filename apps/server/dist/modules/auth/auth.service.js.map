{"version":3,"sources":["../../../src/modules/auth/auth.service.ts"],"sourcesContent":["import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { UsersService } from '@user/users.service';\nimport { hash, verify } from 'argon2';\nimport { SignUpDto } from './dto/credential-sign-up.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from '@common/types/jwt';\nimport { FastifyRequestWithCookie } from '@common/types/fastify-with-cookie';\nimport { DEFAULT_COOKIE_NAME } from '@common/constants';\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly usersService: UsersService, private readonly jwtService: JwtService) { }\n\n  async validateUser(email: string, password: string) {\n    const user = await this.usersService.findOneByEmail(email);\n    if (user.length === 0) throw new NotFoundException('User not found');\n\n    const matchPassword = await verify(user[0].password, password);\n    if (!matchPassword) throw new NotFoundException('Invalid credentials');\n\n    return user;\n  }\n\n  async signUp(signUpDto: SignUpDto) {\n    const user = await this.usersService.findOneByEmail(signUpDto.email);\n    if (user.length > 0) throw new BadRequestException('Email already been used');\n\n    const hashedPassword = await hash(signUpDto.password);\n    const newUser = await this.usersService.create({ ...signUpDto, password: hashedPassword })\n    const token = this.generateToken({\n      email: newUser[0].email,\n      sub: newUser[0].id,\n    });\n    return { user: newUser, token };\n  }\n\n  async signIn(email: string, password: string) {\n    const user = await this.validateUser(email, password);\n    const token = this.generateToken({\n      email: user[0].email,\n      sub: user[0].id,\n    });\n    delete user[0].password;\n    return { user, token };\n  }\n\n  async getUserFromTokenInRequest(request: FastifyRequestWithCookie): Promise<JwtPayload> {\n    const isInHeader = request.headers.authorization !== undefined;\n    const isInCookie = request.cookies[DEFAULT_COOKIE_NAME] !== undefined;\n\n    if (!isInHeader && !isInCookie) {\n      throw new NotFoundException('No session found');\n    }\n\n    const token = isInHeader ? request.headers.authorization.replace(\"Bearer\", \"\").trim() : request.cookies[DEFAULT_COOKIE_NAME];\n    const replacedToken = token.split(\".\");\n    replacedToken.pop();\n    const joinedToken = replacedToken.join(\".\");\n    return this.jwtService.decode(joinedToken);\n  }\n\n  async verifySessionInRequest(request: FastifyRequestWithCookie): Promise<JwtPayload> {\n    const isInHeader = request.headers.authorization !== undefined;\n    const isInCookie = request.cookies[DEFAULT_COOKIE_NAME] !== undefined;\n\n    if (!isInHeader && !isInCookie) {\n      throw new NotFoundException('No session found');\n    }\n\n    const token = isInHeader ? request.headers.authorization.replace(\"Bearer\", \"\").trim() : request.cookies[DEFAULT_COOKIE_NAME];\n    const replacedToken = token.split(\".\");\n    replacedToken.pop();\n    const joinedToken = replacedToken.join(\".\");\n    return this.jwtService.verify(joinedToken);\n  }\n\n  private generateToken(user: { email: string, sub: string }) {\n    return this.jwtService.sign(user);\n  }\n}\n"],"names":["AuthService","validateUser","email","password","user","usersService","findOneByEmail","length","NotFoundException","matchPassword","verify","signUp","signUpDto","BadRequestException","hashedPassword","hash","newUser","create","token","generateToken","sub","id","signIn","getUserFromTokenInRequest","request","isInHeader","headers","authorization","undefined","isInCookie","cookies","DEFAULT_COOKIE_NAME","replace","trim","replacedToken","split","pop","joinedToken","join","jwtService","decode","verifySessionInRequest","sign","constructor"],"mappings":"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"}