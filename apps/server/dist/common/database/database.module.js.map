{"version":3,"sources":["../../../src/common/database/database.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { DatabaseService } from './database.service';\nimport { EnvService } from '@common/env/env.service';\nimport postgres from 'postgres';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport * as schema from './schema';\n\n@Module({\n  providers: [DatabaseService, {\n    provide: 'DATABASE_CONNECTION',\n    inject: [EnvService],\n    useFactory: async (envService: EnvService) => {\n      try {\n        console.log(\"envService\", {\n          DATABASE_NAME: envService.get('DATABASE_NAME'),\n          DATABASE_USER: envService.get('DATABASE_USER'),\n          DATABASE_PASSWORD: envService.get('DATABASE_PASSWORD'),\n          DATABASE_HOST: envService.get('DATABASE_HOST'),\n          DATABASE_PORT: envService.get('DATABASE_PORT'),\n        })\n        const conn = postgres({\n          database: envService.get('DATABASE_NAME'),\n          user: envService.get('DATABASE_USER'),\n          password: envService.get('DATABASE_PASSWORD'),\n          host: envService.get('DATABASE_HOST'),\n          port: envService.get('DATABASE_PORT'),\n          // ssl: true,\n        });\n        console.log(\"conn\", conn)\n        return drizzle(conn, { schema })\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  }],\n  exports: [DatabaseService],\n})\nexport class DatabaseModule { }\n"],"names":["DatabaseModule","providers","DatabaseService","provide","inject","EnvService","useFactory","envService","console","log","DATABASE_NAME","get","DATABASE_USER","DATABASE_PASSWORD","DATABASE_HOST","DATABASE_PORT","conn","postgres","database","user","password","host","port","drizzle","schema","error","exports"],"mappings":";;;;+BAqCaA;;;eAAAA;;;wBArCU;iCACS;4BACL;iEACN;4BACG;gEACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCjB,IAAA,AAAMA,iBAAN,MAAMA;AAAiB;;;QA7B5BC,WAAW;YAACC,gCAAe;YAAE;gBAC3BC,SAAS;gBACTC,QAAQ;oBAACC,sBAAU;iBAAC;gBACpBC,YAAY,OAAOC;oBACjB,IAAI;wBACFC,QAAQC,GAAG,CAAC,cAAc;4BACxBC,eAAeH,WAAWI,GAAG,CAAC;4BAC9BC,eAAeL,WAAWI,GAAG,CAAC;4BAC9BE,mBAAmBN,WAAWI,GAAG,CAAC;4BAClCG,eAAeP,WAAWI,GAAG,CAAC;4BAC9BI,eAAeR,WAAWI,GAAG,CAAC;wBAChC;wBACA,MAAMK,OAAOC,IAAAA,iBAAQ,EAAC;4BACpBC,UAAUX,WAAWI,GAAG,CAAC;4BACzBQ,MAAMZ,WAAWI,GAAG,CAAC;4BACrBS,UAAUb,WAAWI,GAAG,CAAC;4BACzBU,MAAMd,WAAWI,GAAG,CAAC;4BACrBW,MAAMf,WAAWI,GAAG,CAAC;wBAEvB;wBACAH,QAAQC,GAAG,CAAC,QAAQO;wBACpB,OAAOO,IAAAA,mBAAO,EAACP,MAAM;4BAAEQ,QAAAA;wBAAO;oBAChC,EAAE,OAAOC,OAAO;wBACdjB,QAAQC,GAAG,CAACgB;oBACd;gBACF;YACF;SAAE;QACFC,SAAS;YAACxB,gCAAe;SAAC"}