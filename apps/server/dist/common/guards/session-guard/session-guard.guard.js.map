{"version":3,"sources":["../../../../src/common/guards/session-guard/session-guard.guard.ts"],"sourcesContent":["import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from 'src/modules/auth/auth.service';\n\n@Injectable()\nexport class SessionGuard {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly reflector: Reflector,\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise<boolean | Observable<boolean>> {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) return true;\n    const request = context.switchToHttp().getRequest();\n    request.user = await this.authService.getUserFromTokenInRequest(\n      request,\n    );\n\n    return !!(await this.authService.verifySessionInRequest(request))\n  }\n}\n"],"names":["SessionGuard","canActivate","context","isPublic","reflector","getAllAndOverride","getHandler","getClass","request","switchToHttp","getRequest","user","authService","getUserFromTokenInRequest","verifySessionInRequest","constructor"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANgC;sBACnB;6BAEE;;;;;;;;;;AAGrB,IAAA,AAAMA,eAAN,MAAMA;IAKX,MAAMC,YACJC,OAAyB,EACe;QACxC,MAAMC,WAAW,IAAI,CAACC,SAAS,CAACC,iBAAiB,CAAC,YAAY;YAC5DH,QAAQI,UAAU;YAClBJ,QAAQK,QAAQ;SACjB;QAED,IAAIJ,UAAU,OAAO;QACrB,MAAMK,UAAUN,QAAQO,YAAY,GAAGC,UAAU;QACjDF,QAAQG,IAAI,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,yBAAyB,CAC7DL;QAGF,OAAO,CAAC,CAAE,MAAM,IAAI,CAACI,WAAW,CAACE,sBAAsB,CAACN;IAC1D;IAnBAO,YACE,AAAiBH,WAAwB,EACzC,AAAiBR,SAAoB,CACrC;aAFiBQ,cAAAA;aACAR,YAAAA;IACf;AAiBN"}